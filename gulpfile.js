const gulp = require('gulp')
const path = require('path')
const webpackStream = require('webpack-stream')
const gulpSync = require('gulp-sync')(gulp)
const clean = require('gulp-clean')
const fs = require('fs')

const build_dir = './dist'
const cartierBirthday = '1491-12-23T00:00:00Z'
const webpackConfigRelativePath = './webpack.config.js'

/*************** CLEAN FILES ***************/

/**
 * Util method. Delete all files for each directory
 * The directory is not deleted
 * 
 * @param dirs Array : array of absolute directory path
 */
const cleanDirectories = (dirs) => {
    console.log('Deleting files in directories : '+dirs.join())
    return gulp.src(dirs, {read: false})
               .pipe(clean({force: true}))
}

gulp.task('delete-webpack-build-files', () => {
    // delete the file generated by webpack in the dist rep
    return cleanDirectories([ build_dir ])
})

/**************** ENVIRONMENT ****************/

gulp.task('set-env-node-prod', function() {
    return process.env.NODE_ENV = 'production'
})

gulp.task('set-env-node-dev', function() {
    return process.env.NODE_ENV = 'development'
})

gulp.task('set-env-analyser-prod', [ 'set-env-node-prod' ], function() {
    return process.env.PROCESS_ANALYSER = true
})

gulp.task('set-env-analyser-dev', [ 'set-env-node-dev' ], function() {
    return process.env.PROCESS_ANALYSER = true
})

/************** CLEAN INSTALL **************/

gulp.task('clean-install-prod', gulpSync.sync([
    'delete-webpack-build-files',
    'webpack-prod'
]))

gulp.task('clean-install-dev', gulpSync.sync([
    'delete-webpack-build-files',
    'webpack-dev'
]))

gulp.task('clean-install-analyse-prod', gulpSync.sync([
    'delete-webpack-build-files',
    'webpack-prod-analyser'
]))

gulp.task('clean-install-analyse-dev', gulpSync.sync([
    'delete-webpack-build-files',
    'webpack-dev-analyser'
]))

/****************** BUILD ALIASES ******************/

gulp.task('build', [ 'clean-install-prod' ])

gulp.task('build-analyse', [ 'clean-install-analyse-prod' ])

gulp.task('build-dev', [ 'clean-install-dev' ])

gulp.task('build-analyse-dev', [ 'clean-install-analyse-dev' ])

/**************** BUNDLE ANALYSER ****************/

gulp.task('analyse-bundles-prod', gulpSync.sync([
    'webpack-prod-analyser'
]))

gulp.task('analyse-bundles-dev', gulpSync.sync([
    'webpack-dev-analyser'
]))

/****************** WEBPACK ******************/

/**
 * Return the last modified date for a file, or the max modified date for a directory
 * Check recursively all children for a directory
 * 
 * @param {String} filePath : the absolute path of the file or directory
 * @param {Date} currentMaxDate : Optional, the current max date, if undefined an old date is setted 
 * @returns {Date}
 */
const getMaxLastModifiedDate = (filePath, currentMaxDate) => {
    // We need an old date so I choose Jacques Cartier birthday
    if (!currentMaxDate) currentMaxDate = new Date(cartierBirthday)
    if (!filePath) filePath = path.join(path.resolve('.'), 'src')
    
    const fileStat = fs.statSync(filePath)
    const fileMaxDate = new Date(fileStat.mtime)

    if (fileMaxDate > currentMaxDate) currentMaxDate = fileMaxDate

    if (fs.lstatSync(filePath).isDirectory()) {
        const file = fs.readdirSync(filePath)
        file.forEach((childrenName) => {
            let childrenPath = path.join(filePath, childrenName)
            let childrenMax = getMaxLastModifiedDate(childrenPath, currentMaxDate)
            if (childrenMax > currentMaxDate) currentMaxDate = childrenMax
        })
    }

    return currentMaxDate
}

/**
 * Return the last webpack build date
 * 
 * @returns {Date}
 */
const getLastBuildDate = () => {
    try {
        let buildFilePath = path.join(path.resolve('.'), build_dir)
        buildFilePath = path.join(targetPath, 'build.js')
        const fileStat = fs.statSync(buildFilePath)
        return new Date(fileStat.mtime)
    } catch (ex) {
        return new Date(cartierBirthday) // return an old date so I choose Jacques Cartier birthday for fun
    }
}

/**
 * Check if a file/directory has changed in "./src" since the last webpack build
 * 
 * @returns {Boolean}
 */
const sourcesHasChanged = () => {
    const dirsPath = [ path.join(path.resolve('.'), 'src') ]
    let maxLastModifiedDate
    dirsPath.forEach((dirPath) => {
        let dirMaxLastModifiedDate = getMaxLastModifiedDate(dirPath)
        if (!maxLastModifiedDate 
         || maxLastModifiedDate < dirMaxLastModifiedDate) 
            maxLastModifiedDate = dirMaxLastModifiedDate
    })

    return maxLastModifiedDate > getLastBuildDate()
}

/**
 * If files have been changed the webpack build is launched
 * Else nothing is done
 */
const runWebPackIfNeeded = () => {
    if (!sourcesHasChanged()) {
        console.log('No file change since last build, no build will be done !')
        return
    }
    const webpackConfig = require(webpackConfigRelativePath)
    const webpack = require("webpack")
    return gulp.src('src/index.ts')
               .pipe(webpackStream(webpackConfig, webpack)) // webpack is injected to be sure that's the good version
               .pipe(gulp.dest(build_dir))
}

gulp.task('webpack-prod', ['set-env-node-prod'], () => runWebPackIfNeeded())
gulp.task('webpack-dev', ['set-env-node-dev'], () => runWebPackIfNeeded())
gulp.task('webpack-prod-analyser', ['set-env-analyser-prod'], () => runWebPackIfNeeded())
gulp.task('webpack-dev-analyser', ['set-env-analyser-dev'], () => runWebPackIfNeeded())